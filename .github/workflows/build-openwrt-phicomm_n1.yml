#=================================================
# https://github.com/ophub/op
# Description: Automatically Build OpenWrt for Phicomm N1
# Function: Workflows for Build Phicomm N1
# Cron: min (0 - 59) / hour (0 - 23) / day of month (1 - 31) / month (1 - 12) / day of week (0 - 6)(Sunday - Saturday)
#=================================================

name: Build OpenWrt for Phicomm N1

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - 'router/phicomm_n1/.config'
      - '.github/workflows/build-openwrt-phicomm_n1.yml'
  schedule:
    - cron: '0 20 * * 0,3'
  #watch:
    #types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: router/phicomm_n1/.config
  DIY_P1_SH: router/phicomm_n1/diy-part1.sh
  DIY_P2_SH: router/phicomm_n1/diy-part2.sh
  TMP_PATH: router/phicomm_n1/tmp
  OUT_PATH: router/phicomm_n1/out
  OPENWRT_ORGANIZE_PATH: router/phicomm_n1/openwrt
  MAKE_FILE: router/phicomm_n1/make
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_ORIGINALFIRMWARE: true
  UPLOAD_N1FIRMWARE: true
  UPLOAD_RELEASE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions @ Ctrl+C to enter, Ctrl+D to exit
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y.%m.%d")"
        echo "::set-env name=FILE_WEEK::$(date +"%w")"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_ORIGINALFIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=ORIGINALFIRMWARE::$PWD"
        echo "::set-output name=status::success"
 
    - name: Upload firmware directory for Original_Armvirt
      uses: actions/upload-artifact@v2
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_ORIGINALFIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_original_armvirt_64${{ env.FILE_DATE }}
        path: ${{ env.ORIGINALFIRMWARE }}       
        
    - name: Build firmware for N1
      id: buildn1firmware
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_N1FIRMWARE == 'true' && !cancelled()
      run: |
        sudo rm -rf $OUT_PATH
        mkdir -p $OPENWRT_ORGANIZE_PATH
        cp -rf openwrt/bin/targets/*/*/*.tar.gz $OPENWRT_ORGANIZE_PATH
        sudo $MAKE_FILE -d
        cd $OUT_PATH
        for x in $(ls .); do
          cd $x && gzip *.img && cd ../
        done
        cp -rf ../openwrt/* .
        zip -r openwrt_phicomm_n1${{ env.FILE_DATE }}.zip *
        echo "::set-env name=N1FIRMWARE::$PWD/openwrt_phicomm_n1${{ env.FILE_DATE }}.zip"
        echo "::set-output name=status::success"

    - name: Upload firmware directory for Phicomm N1
      uses: actions/upload-artifact@v2
      if: steps.buildn1firmware.outputs.status == 'success' && env.UPLOAD_N1FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_phicomm_n1${{ env.FILE_DATE }}
        path: ${{ env.N1FIRMWARE }}

    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${N1FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        
    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${N1FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        
    - name: Upload Phicomm N1 firmware to release
      uses: svenstaro/upload-release-action@v2
      if: steps.buildn1firmware.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.N1FIRMWARE }}
        tag: OpenWrt_Phicomm_N1${{ env.FILE_DATE }}
        overwrite: true
        file_glob: true
        body: |
          This is OpenWrt firmware for Phicomm N1
          * Firmware information
          Default IP: 192.168.1.1
          Default username: root
          Default password: password
          Default WIFI name: OpenWrt
          Default WIFI password: none

