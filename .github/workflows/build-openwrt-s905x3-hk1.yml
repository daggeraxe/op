#============================================================================================================================
# https://github.com/ophub/op
# Description: Automatically Build OpenWrt for s905x3
# Function: Workflows for Build s905x3
# Cron: min (0 - 59) / hour (0 - 23) / day of month (1 - 31) / month (1 - 12) / day of week (0 - 6)(Sunday - Saturday)
#
# Warning:❗❗❗
# According to Flippy’s introduction, the difference between s905x3 and Phicomm-N1 firmware is the difference 
# in the dtb file specified in boot/uEnv.txt, and the contents of other firmware are common. 
# This script downloads the N1 firmware that has been built, and modifies the path to the dtb file. 
# Since the s905x3 device has not been purchased, the firmware has not been personally tested, 
# and the script has just been online, there may be unknown bugs. 
# You can also test other N1 dtb paths according to the introduction.
#
# firmware_list="n1-thresh x96-100m x96-1000m hk1"
#
# /boot/uEnv.txt: ✅ 
#    #Method: Add # in front of the dtb file path of Phicomm N1, and remove the # in front of the firmware you need. E.g
#
#    #Phicomm N1 
#    #FDT=/dtb/amlogic/meson-gxl-s905d-phicomm-n1.dtb
#    #Phicomm N1 (thresh)
#    #FDT=/dtb/amlogic/meson-gxl-s905d-phicomm-n1-thresh.dtb
#
#    #X96 Max+ (S905X3 for 100m)
#    #FDT=/dtb/amlogic/meson-sm1-x96-max-plus-100m.dtb
#    #X96 Max+ (S905X3 for 1000M)
#    #FDT=/dtb/amlogic/meson-sm1-x96-max-plus.dtb
#
#    #HK1 BoX (S905X3 for 1000M)
#    FDT=/dtb/amlogic/meson-sm1-hk1box-vontar-x3.dtb
#============================================================================================================================

name: Build OpenWrt for s905x3

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-openwrt-s905x3-hk1.yml'
      - 'router/phicomm_n1/build-n1-kernel/make_s905x3_hk1.sh'
  #schedule:
    #- cron: '0 0 * * 5'
  #watch:
    #types: started

env:
  OPENWRT_PATH: router/phicomm_n1/build-n1-kernel/flippy
  MAKE_FILE: router/phicomm_n1/build-n1-kernel/make_s905x3_hk1.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai
  RELEASE_DATE: '2020.10.08'
  USE_KERNEL: '5.4.69'
  MAKE_FIRMWARE: 'x96-1000m'

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Check space usage
      if: (!cancelled())
      run: df -hT
      
    - name: download firmware from Phicomm N1 releases
      id: download
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        wget -q -P $OPENWRT_PATH https://github.com/ophub/op/releases/download/openwrt_phicomm_n1_${{ env.RELEASE_DATE }}/openwrt_phicomm_n1_${{ env.RELEASE_DATE }}.zip
        cd ${{ env.OPENWRT_PATH }} && unzip *.zip
        cd ${{ env.USE_KERNEL }} && gzip -d *.img.gz && mv *.img ../phicomm.img && cd ../
        rm -rf $( find ${PWD}/* -type d )
        rm -rf $( find ${PWD}/* -type f ! -name "*.img" )
        [ -f *.img ] && echo $(ls *.img) file exist || echo *.img file does not exist
        echo "::set-output name=status::success"

    - name: Build firmware
      id: build
      if: steps.download.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        chmod +x ${{ env.MAKE_FILE }}
        sudo ${{ env.MAKE_FILE }} ${{ env.MAKE_FIRMWARE }}
        cd ${{ env.OPENWRT_PATH }} && cd ../out/
        [ $( ls -l | grep "^-" | wc -l ) -gt 1 ] && zip -r openwrt_s905x3_hk1.zip * || zip -r $(ls *.img | sed -e 's/.img//g').zip *.img
        echo "::set-output name=firmware::$PWD/$(ls *.zip)"
        echo "::set-output name=tag::$(ls *.zip | sed -e 's/.zip//g')"
        echo "::set-output name=status::success"

    - name: Upload firmware to Actions
      uses: actions/upload-artifact@master
      if: steps.build.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: ${{ steps.build.outputs.tag }}
        path: ${{ steps.build.outputs.firmware }}

    - name: Upload firmware to WeTransfer
      if: steps.build.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${{ steps.build.outputs.firmware }} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"

    - name: Upload firmware to release
      uses: svenstaro/upload-release-action@v2
      if: steps.build.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ steps.build.outputs.firmware }}
        tag: ${{ steps.build.outputs.tag }}
        overwrite: true
        file_glob: true
        body: |
          This is OpenWrt firmware for ${{ env.MAKE_FIRMWARE }}
          * Firmware information
          Default IP: 192.168.1.1
          Default username: root
          Default password: password
          Default WIFI name: OpenWrt
          Default WIFI password: none
     
